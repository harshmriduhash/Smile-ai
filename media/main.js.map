{"version":3,"file":"main.js","mappings":"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","sources":["webpack://smile-ai/./media/main.ts"],"sourcesContent":["declare const acquireVsCodeApi: () => {\r\n    postMessage: (message: any) => void;\r\n    getState: () => any;\r\n    setState: (state: any) => void;\r\n};\r\n\r\nconst vscode = acquireVsCodeApi();\r\n\r\n// DOM Elements\r\nconst messageInput = document.getElementById('messageInput') as HTMLTextAreaElement;\r\nconst sendButton = document.getElementById('sendButton') as HTMLButtonElement;\r\nconst messagesContainer = document.getElementById('messages') as HTMLDivElement;\r\nconst addModelButtonElement = document.getElementById('addModel') as HTMLButtonElement;\r\nconst includeImportsElement = document.getElementById('includeImports') as HTMLInputElement;\r\nconst includeTipsElement = document.getElementById('includeTips') as HTMLInputElement;\r\nconst includeTestsElement = document.getElementById('includeTests') as HTMLInputElement;\r\nconst messageTemplateElement = document.getElementById('message-template') as HTMLTemplateElement;\r\nconst codeBlockTemplateElement = document.getElementById('code-block-template') as HTMLTemplateElement;\r\nconst fileAttachmentTemplateElement = document.getElementById('file-attachment-template') as HTMLTemplateElement;\r\nconst attachFileButtonElement = document.getElementById('attachFile') as HTMLButtonElement;\r\nconst attachFolderButtonElement = document.getElementById('attachFolder') as HTMLButtonElement;\r\nconst chatModeSelectElement = document.getElementById('chatMode') as HTMLSelectElement;\r\nconst openChatButtonElement = document.getElementById('openChat') as HTMLButtonElement;\r\nconst openComposerButtonElement = document.getElementById('openComposer') as HTMLButtonElement;\r\nconst toolbarButtons = document.querySelectorAll('.toolbar-button[data-view]');\r\n\r\n// Check for missing required elements\r\n// We need to check specifically for the elements that are essential for functionality\r\nif (!messageInput || !sendButton || !messagesContainer) {\r\n    console.error('Essential DOM elements not found');\r\n}\r\n\r\n// Event Listeners\r\nmessageInput?.addEventListener('keypress', (e: KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n        e.preventDefault();\r\n        sendMessage();\r\n    }\r\n});\r\n\r\nsendButton?.addEventListener('click', sendMessage);\r\naddModelButtonElement?.addEventListener('click', () => {\r\n    vscode.postMessage({ command: 'addModel' });\r\n});\r\n\r\nopenChatButtonElement?.addEventListener('click', () => {\r\n    vscode.postMessage({ command: 'openChat' });\r\n});\r\n\r\nopenComposerButtonElement?.addEventListener('click', () => {\r\n    vscode.postMessage({ command: 'openComposer' });\r\n});\r\n\r\n// Toolbar view switching\r\ntoolbarButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        const view = (button as HTMLElement).dataset.view;\r\n        if (view) {\r\n            toolbarButtons.forEach(btn => btn.classList.remove('active'));\r\n            button.classList.add('active');\r\n            vscode.postMessage({ command: 'switchView', view });\r\n        }\r\n    });\r\n});\r\n\r\n// Auto-resize textarea\r\nmessageInput?.addEventListener('input', () => {\r\n    messageInput.style.height = 'auto';\r\n    messageInput.style.height = `${messageInput.scrollHeight}px`;\r\n});\r\n\r\n// File and folder attachment handling\r\nlet currentAttachments: Array<{type: 'file' | 'folder', path: string}> = [];\r\n\r\nattachFileButtonElement?.addEventListener('click', () => {\r\n    vscode.postMessage({ command: 'attachFile' });\r\n});\r\n\r\nattachFolderButtonElement?.addEventListener('click', () => {\r\n    vscode.postMessage({ command: 'attachFolder' });\r\n});\r\n\r\n// Enhanced message sending with attachments and chat mode\r\nfunction sendMessage() {\r\n    const content = messageInput?.value.trim();\r\n    if (content) {\r\n        const options = {\r\n            includeImports: includeImportsElement?.checked ?? true,\r\n            includeTips: includeTipsElement?.checked ?? true,\r\n            includeTests: includeTestsElement?.checked ?? true,\r\n            chatMode: chatModeSelectElement?.value ?? 'chat'\r\n        };\r\n\r\n        vscode.postMessage({\r\n            command: 'sendMessage',\r\n            text: content,\r\n            options: options,\r\n            attachments: currentAttachments\r\n        });\r\n        \r\n        // Clear input after sending\r\n        if (messageInput) {\r\n            messageInput.value = '';\r\n            messageInput.style.height = 'auto';\r\n        }\r\n        \r\n        // Clear attachments after sending\r\n        currentAttachments = [];\r\n        updateAttachmentUI();\r\n    }\r\n}\r\n\r\n// Update attachment UI\r\nfunction updateAttachmentUI() {\r\n    const attachmentsContainer = document.querySelector('.current-attachments');\r\n    if (!attachmentsContainer) return;\r\n\r\n    attachmentsContainer.innerHTML = '';\r\n    currentAttachments.forEach(attachment => {\r\n        const element = document.createElement('div');\r\n        element.className = 'attachment-item';\r\n        element.innerHTML = `\r\n            <i class=\"codicon codicon-${attachment.type === 'file' ? 'file-code' : 'folder'}\"></i>\r\n            <span>${attachment.path.split('/').pop() || attachment.path.split('\\\\').pop()}</span>\r\n            <button class=\"remove-attachment\" data-path=\"${attachment.path}\">\r\n                <i class=\"codicon codicon-close\"></i>\r\n            </button>\r\n        `;\r\n        \r\n        // Add event listener for removing attachment\r\n        const removeButton = element.querySelector('.remove-attachment');\r\n        removeButton?.addEventListener('click', () => {\r\n            const path = (removeButton as HTMLElement).dataset.path;\r\n            if (path) {\r\n                currentAttachments = currentAttachments.filter(a => a.path !== path);\r\n                updateAttachmentUI();\r\n            }\r\n        });\r\n        \r\n        attachmentsContainer.appendChild(element);\r\n    });\r\n}\r\n\r\ninterface VSCodeMessage {\r\n    command: string;\r\n    message?: any;\r\n    error?: string;\r\n    path?: string;\r\n    models?: any[];\r\n}\r\n\r\n// Handle messages from extension\r\nwindow.addEventListener('message', (event: MessageEvent<VSCodeMessage>) => {\r\n    const message = event.data;\r\n    console.log('Received message from extension:', message); // Debug message flow\r\n\r\n    switch (message.command) {\r\n        case 'addMessage':\r\n            if (message.message) {\r\n                console.log('Adding message to UI:', message.message); // Debug message\r\n                addMessage(message.message);\r\n            }\r\n            break;\r\n        case 'showLoading':\r\n            console.log('Showing loading state'); // Debug message\r\n            showLoading();\r\n            break;\r\n        case 'hideLoading':\r\n            console.log('Hiding loading state'); // Debug message\r\n            hideLoading();\r\n            break;\r\n        case 'showError':\r\n            if (message.error) {\r\n                console.log('Showing error:', message.error); // Debug message\r\n                showError(message.error);\r\n            }\r\n            break;\r\n        case 'fileAttached':\r\n            if (message.path) {\r\n                console.log('File attached:', message.path); // Debug message\r\n                currentAttachments.push({ type: 'file', path: message.path });\r\n                updateAttachmentUI();\r\n            }\r\n            break;\r\n        case 'folderAttached':\r\n            if (message.path) {\r\n                console.log('Folder attached:', message.path); // Debug message\r\n                currentAttachments.push({ type: 'folder', path: message.path });\r\n                updateAttachmentUI();\r\n            }\r\n            break;\r\n        case 'updateModels':\r\n            if (message.models) {\r\n                console.log('Updating models list:', message.models); // Debug message\r\n                // Update models dropdown if implemented\r\n            }\r\n            break;\r\n    }\r\n});\r\n\r\ninterface ChatMessage {\r\n    role: 'user' | 'assistant' | 'system';\r\n    content: string;\r\n    timestamp?: number;\r\n    attachments?: Array<{\r\n        type: 'file' | 'folder';\r\n        path: string;\r\n    }>;\r\n}\r\n\r\nfunction addMessage(message: ChatMessage) {\r\n    if (!messageTemplateElement || !messagesContainer) return;\r\n\r\n    const messageElement = messageTemplateElement.content.cloneNode(true) as DocumentFragment;\r\n    const messageDiv = messageElement.querySelector('.message') as HTMLDivElement;\r\n    const avatar = messageElement.querySelector('.avatar i') as HTMLElement;\r\n    const content = messageElement.querySelector('.markdown-content') as HTMLDivElement;\r\n\r\n    if (!messageDiv || !avatar || !content) return;\r\n\r\n    messageDiv.classList.add(message.role);\r\n    avatar.classList.add(message.role === 'user' ? 'codicon-account' : 'codicon-hubot');\r\n\r\n    // Process markdown and code blocks\r\n    const formattedContent = formatMessage(message.content);\r\n    content.innerHTML = formattedContent;\r\n\r\n    // Add file attachments if any\r\n    if (message.attachments && message.attachments.length > 0 && fileAttachmentTemplateElement) {\r\n        const attachmentsContainer = document.createElement('div');\r\n        attachmentsContainer.className = 'attachments';\r\n\r\n        message.attachments.forEach(attachment => {\r\n            const attachmentElement = fileAttachmentTemplateElement.content.cloneNode(true) as DocumentFragment;\r\n            const filename = attachmentElement.querySelector('.filename') as HTMLElement;\r\n            const icon = attachmentElement.querySelector('.icon') as HTMLElement;\r\n\r\n            if (filename && icon) {\r\n                const pathParts = attachment.path.split(/[\\/\\\\]/);\r\n                filename.textContent = pathParts[pathParts.length - 1] || '';\r\n                icon.classList.add(attachment.type === 'file' ? 'codicon-file-code' : 'codicon-folder');\r\n            }\r\n\r\n            attachmentsContainer.appendChild(attachmentElement);\r\n        });\r\n\r\n        content.appendChild(attachmentsContainer);\r\n    }\r\n\r\n    messagesContainer.appendChild(messageElement);\r\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n    \r\n    // Add click handler for code blocks copy functionality\r\n    const codeBlocks = messagesContainer.querySelectorAll('.code-block .copy-button');\r\n    codeBlocks.forEach(button => {\r\n        button.addEventListener('click', (e) => {\r\n            const codeBlock = (e.target as HTMLElement).closest('.code-block');\r\n            const codeContent = codeBlock?.querySelector('code')?.textContent;\r\n            if (codeContent) {\r\n                navigator.clipboard.writeText(codeContent)\r\n                    .then(() => {\r\n                        // Optionally show feedback for successful copy\r\n                        const copyButton = (e.target as HTMLElement).closest('.copy-button') as HTMLElement;\r\n                        if (copyButton) {\r\n                            const originalHTML = copyButton.innerHTML;\r\n                            copyButton.innerHTML = '<i class=\"codicon codicon-check\"></i>';\r\n                            setTimeout(() => {\r\n                                copyButton.innerHTML = originalHTML;\r\n                            }, 1000);\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction formatMessage(content: string): string {\r\n    // Basic markdown-like formatting\r\n    return content\r\n        .replace(/```(\\w*)\\n([\\s\\S]*?)```/g, (_, lang, code) => {\r\n            if (!codeBlockTemplateElement) return `<pre><code>${code}</code></pre>`;\r\n            \r\n            const codeBlock = codeBlockTemplateElement.content.cloneNode(true) as DocumentFragment;\r\n            const codeElement = codeBlock.querySelector('code') as HTMLElement;\r\n            \r\n            if (codeElement) {\r\n                if (lang) {\r\n                    codeElement.classList.add(`language-${lang}`);\r\n                }\r\n                \r\n                codeElement.textContent = code.trim();\r\n            }\r\n            \r\n            const temp = document.createElement('div');\r\n            temp.appendChild(codeBlock);\r\n            return temp.innerHTML;\r\n        })\r\n        .replace(/`([^`]+)`/g, '<code>$1</code>')\r\n        .replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>')\r\n        .replace(/\\*([^*]+)\\*/g, '<em>$1</em>')\r\n        .replace(/\\n/g, '<br>');\r\n}\r\n\r\nfunction showLoading() {\r\n    if (!messagesContainer) return;\r\n    \r\n    const loadingDiv = document.createElement('div');\r\n    loadingDiv.className = 'message assistant loading';\r\n    loadingDiv.innerHTML = `\r\n        <div class=\"avatar\">\r\n            <i class=\"codicon codicon-loading codicon-modifier-spin\"></i>\r\n        </div>\r\n        <div class=\"message-content\">\r\n            <div class=\"markdown-content\">Thinking...</div>\r\n        </div>\r\n    `;\r\n    messagesContainer.appendChild(loadingDiv);\r\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n}\r\n\r\nfunction hideLoading() {\r\n    if (!messagesContainer) return;\r\n    \r\n    const loadingElement = messagesContainer.querySelector('.loading');\r\n    if (loadingElement) {\r\n        loadingElement.remove();\r\n    }\r\n}\r\n\r\nfunction showError(error: string) {\r\n    if (!messagesContainer) return;\r\n    \r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.className = 'message system error';\r\n    errorDiv.innerHTML = `\r\n        <div class=\"avatar\">\r\n            <i class=\"codicon codicon-error\"></i>\r\n        </div>\r\n        <div class=\"message-content\">\r\n            <div class=\"markdown-content\">Error: ${error}</div>\r\n        </div>\r\n    `;\r\n    messagesContainer.appendChild(errorDiv);\r\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n} "],"names":["vscode","acquireVsCodeApi","messageInput","document","getElementById","sendButton","messagesContainer","addModelButtonElement","includeImportsElement","includeTipsElement","includeTestsElement","messageTemplateElement","codeBlockTemplateElement","fileAttachmentTemplateElement","attachFileButtonElement","attachFolderButtonElement","chatModeSelectElement","openChatButtonElement","openComposerButtonElement","toolbarButtons","querySelectorAll","console","error","addEventListener","e","key","shiftKey","preventDefault","sendMessage","postMessage","command","forEach","button","view","dataset","btn","classList","remove","add","style","height","scrollHeight","currentAttachments","content","value","trim","options","includeImports","checked","includeTips","includeTests","chatMode","text","attachments","updateAttachmentUI","attachmentsContainer","querySelector","innerHTML","attachment","element","createElement","className","type","path","split","pop","removeButton","filter","a","appendChild","window","event","message","data","log","messageElement","cloneNode","messageDiv","avatar","role","formattedContent","replace","_","lang","code","codeBlock","codeElement","textContent","temp","formatMessage","length","attachmentElement","filename","icon","pathParts","scrollTop","target","closest","codeContent","navigator","clipboard","writeText","then","copyButton","originalHTML","setTimeout","addMessage","loadingDiv","showLoading","loadingElement","hideLoading","errorDiv","showError","push","models"],"sourceRoot":""}